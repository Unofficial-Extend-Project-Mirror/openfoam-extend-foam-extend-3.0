/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.1                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Mesh in centimetres.  HJ, 10/Dec/2009
convertToMeters 0.01;

vertices
(
    // First plane
    (0 0.86602504 -0.5)
    (0 0.996195 -0.087155743)
    (0 0.996195 0.087155743)
    (0 0.86602504 0.5)

    (0 4.330127019 -2.5)
    (0 4.98097349 -0.087155743)
    (0 4.98097349 0.087155743)
    (0 4.330127019 2.5)

    // Second plane
    (4 0.86602504 -0.5)
    (4 0.996195 -0.087155743)
    (4 0.996195 0.087155743)
    (4 0.86602504 0.5)

    (4 4.330127019 -2.5)
    (4 4.98097349 -0.087155743)
    (4 4.98097349 0.087155743)
    (4 4.330127019 2.5)

    // Third plane
    (7 0.86602504 -0.5)
    (7 0.996195 -0.087155743)
    (7 0.996195 0.087155743)
    (7 0.86602504 0.5)

    (7 4.330127019 -2.5)
    (7 4.98097349 -0.087155743)
    (7 4.98097349 0.087155743)
    (7 4.330127019 2.5)

    // Fourth plane
    (15 0.86602504 -0.5)
    (15 0.996195 -0.087155743)
    (15 0.996195 0.087155743)
    (15 0.86602504 0.5)

    (15 4.330127019 -2.5)
    (15 4.98097349 -0.087155743)
    (15 4.98097349 0.087155743)
    (15 4.330127019 2.5)
);

blocks
(
    // First
    hex (8 9 13 12 0 1 5 4) (10 10 20) simpleGrading (1 1 4)
    hex (9 10 14 13 1 2 6 5) (4 10 20) simpleGrading (1 1 4)
    hex (10 11 15 14 2 3 7 6) (10 10 20) simpleGrading (1 1 4)

    // Second
    hex (16 17 21 20 8 9 13 12) (10 10 40) simpleGrading (1 1 1)
    hex (18 19 23 22 10 11 15 14) (10 10 40) simpleGrading (1 1 1)

    // Third
    hex (24 25 29 28 16 17 21 20) (10 10 50) simpleGrading (1 1 0.25)
    hex (25 26 30 29 17 18 22 21) (4 10 50) simpleGrading (1 1 0.25)
    hex (26 27 31 30 18 19 23 22) (10 10 50) simpleGrading (1 1 0.25)
);

edges
(
    // First
    arc 0 1 (0 0.965925826 -0.258819045)
    arc 2 3 (0 0.965925826 0.258819045)
    arc 4 5 (0 4.829629131 -1.294095225)
    arc 6 7 (0 4.829629131 1.294095225)

    // Second
    arc 8 9 (4 0.965925826 -0.258819045)
    arc 10 11 (4 0.965925826 0.258819045)
    arc 12 13 (4 4.829629131 -1.294095225)
    arc 14 15 (4 4.829629131 1.294095225)

    // Third
    arc 16 17 (7 0.965925826 -0.258819045)
    arc 18 19 (7 0.965925826 0.258819045)
    arc 20 21 (7 4.829629131 -1.294095225)
    arc 22 23 (7 4.829629131 1.294095225)

    // Fourth
    arc 24 25 (15 0.965925826 -0.258819045)
    arc 26 27 (15 0.965925826 0.258819045)
    arc 28 29 (15 4.829629131 -1.294095225)
    arc 30 31 (15 4.829629131 1.294095225)
);

patches
(
    patch inlet
    (
        (0 1 5 4)
        (1 2 6 5)
        (2 3 7 6)
    )

    patch outlet
    (
        (24 28 29 25)
        (25 29 30 26)
        (26 30 31 27)
    )

    wall blade
    (
        (9 13 14 10)
        (10 14 22 18)
        (17 18 22 21)
        (9 17 21 13)
    )

    wall shaft
    (
        (0 8 9 1)
        (1 9 10 2)
        (2 10 11 3)

        (8 16 17 9)
        (10 18 19 11)

        (16 24 25 17)
        (17 25 26 18)
        (18 26 27 19)
    )

    wall shroud
    (
        (4 5 13 12)
        (5 6 14 13)
        (6 7 15 14)

        (12 13 21 20)
        (14 15 23 22)

        (20 21 29 28)
        (21 22 30 29)
        (22 23 31 30)
    )

    cyclic frontAndBack
    (
        (0 4 12 8)
        (8 12 20 16)
        (16 20 28 24)

        (3 11 15 7)
        (11 19 23 15)
        (19 27 31 23)
    )
);

mergePatchPairs
(
);

// ************************************************************************* //
