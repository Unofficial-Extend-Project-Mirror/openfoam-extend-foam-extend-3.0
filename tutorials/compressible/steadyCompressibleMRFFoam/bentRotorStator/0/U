/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.1                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (234 0 0);

boundaryField
{
    inlet
    {
        type            fixedValue;
        value           uniform (234 0 0);
    }

    outlet
    {
//         type            zeroGradient;

        type           inletOutlet;
        inletValue     uniform (0 0 0);

//         type            waveTransmissive;
//         phi             phi;
//         rho             rho;
//         psi             psi;
//         U               U;
//         gamma           1.4;
//         inletOutlet     true;
//         correctSupercritical false;
//         lInf            0;
//         fieldInf        (0 0 0);
//         value           $internalField;
    }

    bladeRotor
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    shaftRotor
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    shroudRotor
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    bladeStator
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    shaftStator
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    shroudStator
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    frontAndBack
    {
        type            cyclic;
    }
}

// ************************************************************************* //
