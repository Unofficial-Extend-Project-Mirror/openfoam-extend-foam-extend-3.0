/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.1                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.0001;

vertices
(
    ( -10   0   0)
    (   0   0   0)
    (  10   0   0)
    (  30   0   0)

    ( -10   1   0)
    (   0   1   0)
    (  10   1   0)
    (  30   1   0)

    ( -10   5   0)
    (   0   5   0)
    (  10   5   0)
    (  30   5   0)

    ( -10   0   0.1)
    (   0   0   0.1)
    (  10   0   0.1)
    (  30   0   0.1)

    ( -10   1   0.1)
    (   0   1   0.1)
    (  10   1   0.1)
    (  30   1   0.1)

    ( -10   5   0.1)
    (   0   5   0.1)
    (  10   5   0.1)
    (  30   5   0.1)
);

edges
();

blocks
(
    hex (0 1 5 4 12 13 17 16) (10 20 1) simpleGrading (0.2 1 1)
    hex (1 2 6 5 13 14 18 17) (50 20 1) simpleGrading (1 1 1)
    hex (2 3 7 6 14 15 19 18) (30 20 1) simpleGrading (5 1 1)
    hex (4 5 9 8 16 17 21 20) (10 30 1) simpleGrading (0.2 5 1)
    hex (6 7 11 10 18 19 23 22) (30 30 1) simpleGrading (5 5 1)
);

boundary
(
    in
    {
        type patch;
        faces
        (
        (0 12 16 4)
        (4 16 20 8)
        );
    }

    out
    {
        type patch;
        faces
        (
        (3 7 19 15)
        (7 11 23 19)
        );
    }

    bottom
    {
        type symmetryPlane;
        faces
        (
        (0 1 13 12)
        (1 2 14 13)
        (2 3 15 14)
        );
    }

    topWall
    {
        type wall;
        faces
        (
        (8 20 21 9)
        (9 21 17 5)
        (5 17 18 6)
        (6 18 22 10)
        (10 22 23 11)
        );
    }
);

// ************************************************************************* /

